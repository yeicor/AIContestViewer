name: "Godot CI/CD"

on:
  push:
    branches: ["master"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: "read"
  pages: "write"
  id-token: "write"
  
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  GODOT_VERSION: "4.4.1"  # TODO: auto-update!

jobs:
  test:
    runs-on: "${{ matrix.platform }}"
    strategy:
      fail-fast: false
      matrix:
        platform: ["ubuntu-latest"] # , "macos-latest", "windows-latest"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "chickensoft-games/setup-godot@v2"
        with:
          version: "${{ env.GODOT_VERSION }}"
          use-dotnet: false
      - shell: "bash"
        run: |
          echo "Trying to avoid headless mode..."
          GODOT_CMD="godot --headless"
          if [[ "${{ matrix.platform }}" == "ubuntu-latest" ]]; then
            GODOT_CMD="xvfb-run godot"
          fi
          
          echo "Importing the game with the editor before running..."
          $GODOT_CMD --import --verbose --path . # Ignore errors during first import!
          
          echo "Running the game..."
          common_turn_secs=0 common_start_round_secs=0 common_end_round_secs=0 common_end_game_turn_secs=0 \
          $GODOT_CMD --verbose --path . 2>&1 | tee run.log
          
          echo "Checking the logs for errors..."
          grep -Ei 'err|fail|warn' run.log | \
          grep -v -Ei 'whitelisted-term1|whitelisted-term2' &&\
          exit 1 || echo "No issues found in log."
          
          # TODO: Record game video and upload preview to main README.md

  export:
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
      matrix:
        include:
          - exportname: "Linux"
            arch: "x86_64"
            extension: "x86_64"
#           - exportname: "Linux"
#             arch: "x86_64"
#             extension: "x86_32"
#           - exportname: "Linux"
#             arch: "arm64"
#             extension: "arm64"
#           - exportname: "Linux"
#             arch: "arm32"
#             extension: "arm32"
# 
#           - exportname: "WindowsDesktop"
#             arch: "x86_64"
#             extension: "exe"
#           - exportname: "WindowsDesktop"
#             arch: "x86_32"
#             extension: "exe"
#           - exportname: "WindowsDesktop"
#             arch: "arm64"
#             extension: "exe"
#             
#           - exportname: "Android"
#             arch: "arm64-v8a"
#             extension: "arm64-v8a"
#           - exportname: "Android"
#             arch: "armeabi-v7a"
#             extension: "armeabi-v7a"
#           - exportname: "Android"
#             arch: "x86_64"
#             extension: "x86_64"
#           - exportname: "Android"
#             arch: "x86"
#             extension: "x86"
#             
#           - exportname: "Web"
#             arch: "wasm"
#             extension: "html"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "chickensoft-games/setup-godot@v2"
        with:
          version: "${{ env.GODOT_VERSION }}"
          use-dotnet: false
          include-templates: true
      - run: |
          set -x
          
          # Edit preset config file to force select architecture
          if [[ "${{ matrix.exportname }}" != "Android" ]]; then
            sed -ei 's/"x86_64"/"'"${{ matrix.arch }}"'"/g' export_presets.cfg
          else
            sed -ei 's,architectures/.*,,g' export_presets.cfg
            sed -ei 's,version/code,architectures/'"${{ matrix.arch }}"'=true,g' export_presets.cfg
          fi
          
          EXPORT_ARG="--export-release"
          if [[ "${{ matrix.exportname }}" == "Android" ]]; then
            EXPORT_ARG="--export-debug"  # XXX: Avoid messing with keystore
          fi
          
          FOLDER="build/${{ matrix.exportname }}-${{ matrix.arch }}"
          mkdir -p "${FOLDER}"
          xvfb-run godot --verbose $EXPORT_ARG "${{ matrix.exportname }}" "${FOLDER}/${{ matrix.exportname }}.${{ matrix.extension }}"
      - uses: "actions/upload-artifact@v4"
        with:
          name: "${{ matrix.exportname }}-${{ matrix.arch }}"
          path: "build/${{ matrix.exportname }}-${{ matrix.arch }}"

  deploy:
    needs: "export"
    if: "github.ref == 'refs/heads/main'"
    runs-on: "ubuntu-latest"
    name: "Deploy to GitHub Pages"
    steps:
      - uses: "actions/download-artifact@v4"
        with:
          name: "Web"
          path: "web-export"
      - uses: "actions/configure-pages@v5"
      - uses: "actions/upload-pages-artifact@v3"
        with:
          path: "web-export"
      - uses: "actions/deploy-pages@v4"
