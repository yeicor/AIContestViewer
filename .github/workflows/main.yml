name: "Godot CI/CD"

on:
  push:
    branches: ["master"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: "read"
  pages: "write"
  id-token: "write"
  
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  GODOT_VERSION: "4.4.1"  # TODO: auto-update!

jobs:
  import:
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "chickensoft-games/setup-godot@v2"
        with:
          version: "${{ env.GODOT_VERSION }}"
          use-dotnet: false
      - uses: "jakoch/install-vulkan-sdk-action@v1"
        with:
          optional_components: "com.lunarg.vulkan.vma"
          install_runtime: true
          cache: true
          stripdown: true
          # You can install a software rasterizer.
          install_swiftshader: true
          install_lavapipe: true
      - shell: "bash"
        run: |
          set -x
          
          # Ensure all assets are actually imported instead of just the auto-detected ones
          #git ls-files | grep -Ev ".import|.uid|.txt|.cfg|.md|.git" | \
          #xargs --verbose --max-args=1 \
          #${{matrix.godot}} --verbose --import 2>&1 >> import.log
          ${{matrix.godot}} --verbose --import . 2>&1 | tee -a import.log
      
      - uses: "actions/upload-artifact@v4"
        with:
          name: "import"
          path: |
            import.log
            .godot

  test:
    needs: "import"
    runs-on: "${{ matrix.platform }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-latest"
            godot: "xvfb-run godot"
          # - platform: "windows-latest"
          #   godot: "godot"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "actions/download-artifact@v4"
        with:
          name: "import"
          path: "."
      - uses: "chickensoft-games/setup-godot@v2"
        with:
          version: "${{ env.GODOT_VERSION }}"
          use-dotnet: false
      - uses: "jakoch/install-vulkan-sdk-action@v1"
        with:
          optional_components: "com.lunarg.vulkan.vma"
          install_runtime: true
          cache: true
          stripdown: true
          # You can install a software rasterizer.
          install_swiftshader: true
          install_lavapipe: true
      - shell: "bash"
        run: |
          set -x
          
          echo "Running the game..."
          common_turn_secs=0 common_start_round_secs=0 common_end_round_secs=0 common_end_game_turn_secs=0 \
          ${{matrix.godot}} --verbose --path . 2>&1 | tee run.log
          
          echo "Gathering errors from the log..."
          # | grep -v -Ei 'whitelisted-term1|whitelisted-term2' \
          grep -Ei 'err|fail|warn' run.log \
          && exit 1 || echo "No issues found in log."
          
          # TODO: Record game video and upload preview to main README.md
      
      - uses: "actions/upload-artifact@v4"
        with:
          name: "test"
          path: |
            run.log

  export:
    needs: "import"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
      matrix:
        include:
          - exportname: "Linux"
            arch: "x86_64"
            extension: "x86_64"
          - exportname: "Linux"
            arch: "x86_32"
            extension: "x86_32"
          - exportname: "Linux"
            arch: "arm64"
            extension: "arm64"
          - exportname: "Linux"
            arch: "arm32"
            extension: "arm32"

          - exportname: "WindowsDesktop"
            arch: "x86_64"
            extension: "exe"
          - exportname: "WindowsDesktop"
            arch: "x86_32"
            extension: "exe"
          - exportname: "WindowsDesktop"
            arch: "arm64"
            extension: "exe"
            
          - exportname: "Android"
            arch: "arm64-v8a"
            extension: "apk"
          - exportname: "Android"
            arch: "armeabi-v7a"
            extension: "apk"
          - exportname: "Android"
            arch: "x86_64"
            extension: "apk"
          - exportname: "Android"
            arch: "x86"
            extension: "apk"
            
          - exportname: "Web"
            arch: "wasm"
            extension: "html"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "actions/download-artifact@v4"
        with:
          name: "import"
          path: "."
      - uses: "chickensoft-games/setup-godot@v2"
        with:
          version: "${{ env.GODOT_VERSION }}"
          use-dotnet: false
          include-templates: true
      - run: |
          set -x
          
          # Edit preset config file to force select architecture
          if [[ "${{ matrix.exportname }}" != "Android" ]]; then
            sed -i -e 's/"x86_64"/"'"${{ matrix.arch }}"'"/g' export_presets.cfg
          else
            sed -i -e 's,architectures/.*,,g' export_presets.cfg
            sed -i -e 's,version/code,architectures/'"${{ matrix.arch }}"'=true|version/code,g' export_presets.cfg
            tr '|' '\n' <export_presets.cfg >export_presets2.cfg
            mv export_presets2.cfg export_presets.cfg
          fi
          
          EXPORT_ARG="--export-release"
          if [[ "${{ matrix.exportname }}" == "Android" ]]; then
            EXPORT_ARG="--export-debug"  # XXX: Avoid messing with keystore
          fi
          
          FOLDER="build/${{ matrix.exportname }}-${{ matrix.arch }}"
          mkdir -p "${FOLDER}"
          xvfb-run godot --verbose $EXPORT_ARG "${{ matrix.exportname }}" "${FOLDER}/${{ github.event.repository.name }}-${{ matrix.exportname }}-${{ matrix.arch }}.${{ matrix.extension }}"
      - uses: "actions/upload-artifact@v4"
        with:
          name: "${{ matrix.exportname }}-${{ matrix.arch }}"
          path: "build/${{ matrix.exportname }}-${{ matrix.arch }}"

  deploy:
    needs: "export"
    if: "github.ref == 'refs/heads/master'"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/download-artifact@v4"
        with:
          name: "Web-wasm"
          path: "web-export"
      - run: "mv web-export/AIContestViewer-Web-wasm.html web-export/index.html"
      - uses: "actions/configure-pages@v5"
      - uses: "actions/upload-pages-artifact@v3"
        with:
          path: "web-export"
      - uses: "actions/deploy-pages@v4"
