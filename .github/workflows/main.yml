name: "Godot CI/CD"

on:
  push:
    branches: ["master"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: "read"
  pages: "write"
  id-token: "write"
  
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  GODOT_VERSION: "4.4.1-stable" # <-- Auto-updated, do not edit format

jobs:
  import:
    runs-on: "${{ matrix.platform }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-latest"
            godot: "xvfb-run godot"
          # - platform: "windows-latest"
          #   godot: "godot"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "chickensoft-games/setup-godot@v2"
        with:
          version: "${{ env.GODOT_VERSION }}"
          use-dotnet: false
      # Install vulkan software rasterizer for advanced features (Windows)
      - uses: "jakoch/install-vulkan-sdk-action@v1"
        if: "matrix.platform == 'windows-latest'"
        with:
          optional_components: "com.lunarg.vulkan.vma"
          install_runtime: true
          cache: true
          stripdown: true
          install_swiftshader: true
          install_lavapipe: true
      # Install vulkan software rasterizer for advanced features (Linux)
      - if: "matrix.platform == 'ubuntu-latest'"
        run: "sudo apt install -y mesa-vulkan-drivers libvulkan1 vulkan-tools vulkan-validationlayers"
      - shell: "bash"
        run: |
          set -x
          
          # Ensure all assets are actually imported instead of just the auto-detected ones
          #ALL_IMPORTS=$(git ls-files | grep -Ev ".import|.uid|.txt|.cfg|.md|.git|LICENSE|.gd")
          #echo "$ALL_IMPORTS" | pv --line-mode --size $(echo "$ALL_IMPORTS" | wc -l) | \
          #xargs --verbose --max-args=1 --max-procs=1 -I {} sh -c \
          #"${{matrix.godot}} --audio-driver Dummy --import {} || true"  >import.log
          ${{matrix.godot}} --audio-driver Dummy --import . 2>&1 | tee -a import.log || \
          echo "Godot import failed with exit code $?. Continuing anyway..."
          
      - uses: "actions/upload-artifact@v4"
        with:
          name: "import-${{ matrix.platform }}"
          include-hidden-files: true
          path: |
            import.log
            .godot

  test:
    needs: "import"
    runs-on: "${{ matrix.platform }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-latest"
            godot: "xvfb-run godot"
          # - platform: "windows-latest"
          #   godot: "godot"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "actions/download-artifact@v4"
        with:
          name: "import-${{ matrix.platform }}"
          path: "."
          
      - uses: "chickensoft-games/setup-godot@v2"
        with:
          version: "${{ env.GODOT_VERSION }}"
          use-dotnet: false
      - if: "matrix.platform == 'windows-latest'"
        uses: "jakoch/install-vulkan-sdk-action@v1"
        with:
          optional_components: "com.lunarg.vulkan.vma"
          install_runtime: true
          cache: true
          stripdown: true
          install_swiftshader: true
          install_lavapipe: true
      - if: "matrix.platform == 'ubuntu-latest'"
        run: "sudo apt install -y mesa-vulkan-drivers libvulkan1 vulkan-tools vulkan-validationlayers"
        
      - shell: "bash"
        run: |
          set -x
          
          echo "Running the game..."
          common_turn_secs=0 common_start_round_secs=0 common_end_round_secs=0 common_end_game_turn_secs=0 \
          ${{matrix.godot}} --audio-driver Dummy --write-movie recording.png \
          --gpu-profile --profiling --debug --resolution 320x180 --quit-after 30 \
          --verbose --path . 2>&1 | tee run.log
          
          echo "Gathering errors from the log..."
          # | grep -v -Ei 'whitelisted-term1|whitelisted-term2' \
          grep -Ei 'err|fail|warn' run.log \
          && exit 1 || echo "No issues found in log."
          
          # TODO: Record game video and upload preview to main README.md
      
      - uses: "actions/upload-artifact@v4"
        with:
          name: "test"
          path: |
            recording*
            run.log

  export:
    needs: "import"
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
      matrix:
        exportname: ["Linux", "WindowsDesktop", "Android", "Web"]
        arch: ["x86_64", "x86_32", "arm64", "arm32"]
        debug: ["true", "false"]
        exclude: # Not all configs are supported
          - exportname: "WindowsDesktop"
            arch: "arm32"
          - exportname: "Android"
            debug: "false" # XXX: Avoid messing with secret release keystores
          - exportname: "Web"
            arch: "x86_32" # XXX: Supports any architecture in a common build
          - exportname: "Web"
            arch: "arm64"
          - exportname: "Web"
            arch: "arm32"
        include: # Append platform-specific attributes
          - exportname: "Linux"
            extension: "bin"
          - exportname: "WindowsDesktop"
            extension: "exe"
          - exportname: "Android"
            extension: "apk"
          - exportname: "Web"
            extension: "html"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "actions/download-artifact@v4"
        with:
          name: "import-ubuntu-latest"
          path: "."
          
      - uses: "chickensoft-games/setup-godot@v2"
        with:
          version: "${{ env.GODOT_VERSION }}"
          use-dotnet: false
          include-templates: true
      - run: "sudo apt install -y mesa-vulkan-drivers libvulkan1 vulkan-tools vulkan-validationlayers"
        
      - run: |
          set -x
          
          # Edit preset config file to force select target architecture
          if [[ "${{ matrix.exportname }}" == "Android" ]]; then
            # Android architectures have different names and different format in export_presets.cfg
            matrix_arch="$(echo "${{ matrix.arch }}" | sed 's/x86_32/x86/;s/arm64/arm64-v8a/;s/arm32/armeabi-v7a/')"
            sed -i -e 's,architectures/.*,,g' export_presets.cfg
            sed -i -e 's,version/code,architectures/'"${matrix_arch}"'=true|version/code,g' export_presets.cfg
            tr '|' '\n' <export_presets.cfg >export_presets2.cfg
            mv export_presets2.cfg export_presets.cfg
          else # Desktop platforms are easier... (web ignores arch)
            sed -i -e 's/"x86_64"/"'"${{ matrix.arch }}"'"/g' export_presets.cfg
          fi
          
          EXPORT_ARG="--export-release"
          if [[ "${{ matrix.debug }}" == "true" ]]; then
            EXPORT_ARG="--export-debug"
          fi
          
          mkdir -p "dist"
          FILE="dist/${{ github.event.repository.name }}-${{ matrix.exportname }}-${{ matrix.arch }}-${{ matrix.debug == 'true' && 'debug' || 'release' }}.${{ matrix.extension }}"
          xvfb-run godot --audio-driver Dummy "$EXPORT_ARG" "${{ matrix.exportname }}" "$FILE"
          
      - uses: "actions/upload-artifact@v4"
        with:
          name: "${{ matrix.exportname }}-${{ matrix.arch }}-${{ matrix.debug == 'true' && 'debug' || 'release' }}"
          path: "dist"

  deploy:
    needs: ["export", "test"] # Export for artifact and test for validation
    if: "github.ref == 'refs/heads/master'"
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/download-artifact@v4"
        with:
          name: "Web-x86_64-release"
          path: "web-export"
      - run: "mv web-export/AIContestViewer-Web-wasm.html web-export/index.html"
      - uses: "actions/configure-pages@v5"
      - uses: "actions/upload-pages-artifact@v3"
        with:
          path: "web-export"
      - uses: "actions/deploy-pages@v4"
